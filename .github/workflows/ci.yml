
on:
  push:
    branches: [main]
    paths:
      - "deployment/lxc/**"
      - ".github/workflows/**"
      - "VERSION"
      - "pyproject.toml"
  pull_request:
    paths:
      - "pyproject.toml"
      - "VERSION"
      - ".github/workflows/**"
      - "**/*.py"

jobs:
  version-setup:
    name: Parse Version Info
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: ${{ steps.set.outputs.APP_VERSION }}
      PYTHON_VERSION: ${{ steps.set.outputs.PYTHON_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read VERSION and requires-python
        id: set
        run: |
          VERSION=$(cat VERSION)
          PYTHON_VERSION=$(grep -Po '(?<=requires-python = ">=)\d+\.\d+' pyproject.toml)
          echo "APP_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_OUTPUT

  test:
    name: Test with Python
    runs-on: ubuntu-latest
    needs: version-setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.version-setup.outputs.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]

      - name: Run ruff check
        run: ruff check .

      - name: Run ruff format
        run: ruff format --check .

      - name: Run tests
        run: pytest

  package-deployment:
    name: Package LXC Deployment
    runs-on: ubuntu-latest
    needs: [test, version-setup]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Skip if deployment files did not change
        run: |
          if git diff --quiet HEAD^ HEAD -- deployment/lxc; then
            echo "No changes to deployment/lxc. Skipping package."
            exit 0
          fi

      - name: Patch env-template with version and Python version
        run: |
          sed -i "s/^PYTHON_VERSION=.*/PYTHON_VERSION=${{ needs.version-setup.outputs.PYTHON_VERSION }}/" deployment/lxc/env-template
          if grep -q '^FILETOOLS_VERSION=' deployment/lxc/env-template; then
            sed -i "s/^FILETOOLS_VERSION=.*/FILETOOLS_VERSION=${{ needs.version-setup.outputs.APP_VERSION }}/" deployment/lxc/env-template
          else
            echo "FILETOOLS_VERSION=${{ needs.version-setup.outputs.APP_VERSION }}" >> deployment/lxc/env-template
          fi

      - name: Package deployment/lxc into versioned tarball
        run: |
          mkdir -p deployment/packages
          tar -czf lxc-deploy-${{ needs.version-setup.outputs.APP_VERSION }}.tar.gz -C deployment/lxc .

      - name: Upload packaged artifact
        uses: actions/upload-artifact@v4
        with:
          name: lxc-deploy-${{ needs.version-setup.outputs.APP_VERSION }}
          path: lxc-deploy-${{ needs.version-setup.outputs.APP_VERSION }}.tar.gz

  bump-version:
    name: Bump Patch Version
    runs-on: ubuntu-latest
    needs: [package-deployment, version-setup]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Read and bump patch version
        id: bump
        run: |
          version=$(cat VERSION)
          base="${version%.*}"
          patch="${version##*.}"
          new_version="$base.$((patch + 1))"
          echo "$new_version" > VERSION
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Commit and push new version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "ci: bump patch version to ${{ env.VERSION }}"
          git push

  release:
    name: Upload Tarball to GitHub Release
    runs-on: ubuntu-latest
    needs: [bump-version, version-setup]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        id: get_version
        run: echo "VERSION=${{ needs.version-setup.outputs.APP_VERSION }}" >> $GITHUB_ENV

      - name: Download packaged tarball from previous job
        uses: actions/download-artifact@v4
        with:
          name: lxc-deploy-${{ env.VERSION }}
          path: .

      - name: Create or update GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          draft: false
          prerelease: false
          allow_updates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload tarball to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          files: lxc-deploy-${{ env.VERSION }}.tar.gz
          allow_updates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
